
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Companies
 * 
 */
export type Companies = {
  uuid: string
  name: string
  fancyName: string
  corporateName: string
  document: string
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
}

/**
 * Model Users
 * 
 */
export type Users = {
  uuid: string
  document: string
  email: string
  password: string
  preRegisterDate: Date
  tokePreRegister: string | null
  registerDate: Date | null
  tokenDiscount: string | null
  isActivated: boolean
  birthDate: Date | null
  parentUuid: string | null
  walletUuid: string
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
}

/**
 * Model wallets
 * 
 */
export type wallets = {
  uuid: string
  textContract: string
  version: string
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
}

/**
 * Model beneficts
 * 
 */
export type beneficts = {
  uuid: string
  name: string
  description: string
  value: number
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
  walletUuid: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Companies
 * const companies = await prisma.companies.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Companies
   * const companies = await prisma.companies.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.companies`: Exposes CRUD operations for the **Companies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.companies.findMany()
    * ```
    */
  get companies(): Prisma.CompaniesDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.wallets`: Exposes CRUD operations for the **wallets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallets.findMany()
    * ```
    */
  get wallets(): Prisma.walletsDelegate<GlobalReject>;

  /**
   * `prisma.beneficts`: Exposes CRUD operations for the **beneficts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Beneficts
    * const beneficts = await prisma.beneficts.findMany()
    * ```
    */
  get beneficts(): Prisma.benefictsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.7.1
   * Query Engine version: 272861e07ab64f234d3ffc4094e32bd61775599c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Companies: 'Companies',
    Users: 'Users',
    wallets: 'wallets',
    beneficts: 'beneficts'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    childrens: number
  }

  export type UsersCountOutputTypeSelect = {
    childrens?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type WalletsCountOutputType
   */


  export type WalletsCountOutputType = {
    users: number
    beneficts: number
  }

  export type WalletsCountOutputTypeSelect = {
    users?: boolean
    beneficts?: boolean
  }

  export type WalletsCountOutputTypeGetPayload<S extends boolean | null | undefined | WalletsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WalletsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (WalletsCountOutputTypeArgs)
    ? WalletsCountOutputType 
    : S extends { select: any } & (WalletsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof WalletsCountOutputType ? WalletsCountOutputType[P] : never
  } 
      : WalletsCountOutputType




  // Custom InputTypes

  /**
   * WalletsCountOutputType without action
   */
  export type WalletsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WalletsCountOutputType
     * 
    **/
    select?: WalletsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Companies
   */


  export type AggregateCompanies = {
    _count: CompaniesCountAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  export type CompaniesMinAggregateOutputType = {
    uuid: string | null
    name: string | null
    fancyName: string | null
    corporateName: string | null
    document: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type CompaniesMaxAggregateOutputType = {
    uuid: string | null
    name: string | null
    fancyName: string | null
    corporateName: string | null
    document: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type CompaniesCountAggregateOutputType = {
    uuid: number
    name: number
    fancyName: number
    corporateName: number
    document: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type CompaniesMinAggregateInputType = {
    uuid?: true
    name?: true
    fancyName?: true
    corporateName?: true
    document?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type CompaniesMaxAggregateInputType = {
    uuid?: true
    name?: true
    fancyName?: true
    corporateName?: true
    document?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type CompaniesCountAggregateInputType = {
    uuid?: true
    name?: true
    fancyName?: true
    corporateName?: true
    document?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type CompaniesAggregateArgs = {
    /**
     * Filter which Companies to aggregate.
     * 
    **/
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     * 
    **/
    orderBy?: Enumerable<CompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompaniesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompaniesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompaniesMaxAggregateInputType
  }

  export type GetCompaniesAggregateType<T extends CompaniesAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanies[P]>
      : GetScalarType<T[P], AggregateCompanies[P]>
  }




  export type CompaniesGroupByArgs = {
    where?: CompaniesWhereInput
    orderBy?: Enumerable<CompaniesOrderByWithAggregationInput>
    by: Array<CompaniesScalarFieldEnum>
    having?: CompaniesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompaniesCountAggregateInputType | true
    _min?: CompaniesMinAggregateInputType
    _max?: CompaniesMaxAggregateInputType
  }


  export type CompaniesGroupByOutputType = {
    uuid: string
    name: string
    fancyName: string
    corporateName: string
    document: string
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: CompaniesCountAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  type GetCompaniesGroupByPayload<T extends CompaniesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CompaniesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompaniesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
            : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
        }
      >
    >


  export type CompaniesSelect = {
    uuid?: boolean
    name?: boolean
    fancyName?: boolean
    corporateName?: boolean
    document?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }


  export type CompaniesGetPayload<S extends boolean | null | undefined | CompaniesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Companies :
    S extends undefined ? never :
    S extends { include: any } & (CompaniesArgs | CompaniesFindManyArgs)
    ? Companies 
    : S extends { select: any } & (CompaniesArgs | CompaniesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Companies ? Companies[P] : never
  } 
      : Companies


  type CompaniesCountArgs = Merge<
    Omit<CompaniesFindManyArgs, 'select' | 'include'> & {
      select?: CompaniesCountAggregateInputType | true
    }
  >

  export interface CompaniesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Companies that matches the filter.
     * @param {CompaniesFindUniqueArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompaniesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompaniesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Companies'> extends True ? Prisma__CompaniesClient<CompaniesGetPayload<T>> : Prisma__CompaniesClient<CompaniesGetPayload<T> | null, null>

    /**
     * Find one Companies that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompaniesFindUniqueOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompaniesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompaniesFindUniqueOrThrowArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Find the first Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindFirstArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompaniesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompaniesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Companies'> extends True ? Prisma__CompaniesClient<CompaniesGetPayload<T>> : Prisma__CompaniesClient<CompaniesGetPayload<T> | null, null>

    /**
     * Find the first Companies that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindFirstOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompaniesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompaniesFindFirstOrThrowArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.companies.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.companies.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const companiesWithUuidOnly = await prisma.companies.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends CompaniesFindManyArgs>(
      args?: SelectSubset<T, CompaniesFindManyArgs>
    ): PrismaPromise<Array<CompaniesGetPayload<T>>>

    /**
     * Create a Companies.
     * @param {CompaniesCreateArgs} args - Arguments to create a Companies.
     * @example
     * // Create one Companies
     * const Companies = await prisma.companies.create({
     *   data: {
     *     // ... data to create a Companies
     *   }
     * })
     * 
    **/
    create<T extends CompaniesCreateArgs>(
      args: SelectSubset<T, CompaniesCreateArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Delete a Companies.
     * @param {CompaniesDeleteArgs} args - Arguments to delete one Companies.
     * @example
     * // Delete one Companies
     * const Companies = await prisma.companies.delete({
     *   where: {
     *     // ... filter to delete one Companies
     *   }
     * })
     * 
    **/
    delete<T extends CompaniesDeleteArgs>(
      args: SelectSubset<T, CompaniesDeleteArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Update one Companies.
     * @param {CompaniesUpdateArgs} args - Arguments to update one Companies.
     * @example
     * // Update one Companies
     * const companies = await prisma.companies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompaniesUpdateArgs>(
      args: SelectSubset<T, CompaniesUpdateArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Delete zero or more Companies.
     * @param {CompaniesDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.companies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompaniesDeleteManyArgs>(
      args?: SelectSubset<T, CompaniesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const companies = await prisma.companies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompaniesUpdateManyArgs>(
      args: SelectSubset<T, CompaniesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Companies.
     * @param {CompaniesUpsertArgs} args - Arguments to update or create a Companies.
     * @example
     * // Update or create a Companies
     * const companies = await prisma.companies.upsert({
     *   create: {
     *     // ... data to create a Companies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Companies we want to update
     *   }
     * })
    **/
    upsert<T extends CompaniesUpsertArgs>(
      args: SelectSubset<T, CompaniesUpsertArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.companies.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompaniesCountArgs>(
      args?: Subset<T, CompaniesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompaniesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompaniesAggregateArgs>(args: Subset<T, CompaniesAggregateArgs>): PrismaPromise<GetCompaniesAggregateType<T>>

    /**
     * Group by Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompaniesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompaniesGroupByArgs['orderBy'] }
        : { orderBy?: CompaniesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompaniesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompaniesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Companies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompaniesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Companies base type for findUnique actions
   */
  export type CompaniesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Companies
     * 
    **/
    select?: CompaniesSelect | null
    /**
     * Filter, which Companies to fetch.
     * 
    **/
    where: CompaniesWhereUniqueInput
  }

  /**
   * Companies: findUnique
   */
  export interface CompaniesFindUniqueArgs extends CompaniesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Companies findUniqueOrThrow
   */
  export type CompaniesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Companies
     * 
    **/
    select?: CompaniesSelect | null
    /**
     * Filter, which Companies to fetch.
     * 
    **/
    where: CompaniesWhereUniqueInput
  }


  /**
   * Companies base type for findFirst actions
   */
  export type CompaniesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Companies
     * 
    **/
    select?: CompaniesSelect | null
    /**
     * Filter, which Companies to fetch.
     * 
    **/
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     * 
    **/
    orderBy?: Enumerable<CompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     * 
    **/
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     * 
    **/
    distinct?: Enumerable<CompaniesScalarFieldEnum>
  }

  /**
   * Companies: findFirst
   */
  export interface CompaniesFindFirstArgs extends CompaniesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Companies findFirstOrThrow
   */
  export type CompaniesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Companies
     * 
    **/
    select?: CompaniesSelect | null
    /**
     * Filter, which Companies to fetch.
     * 
    **/
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     * 
    **/
    orderBy?: Enumerable<CompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     * 
    **/
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     * 
    **/
    distinct?: Enumerable<CompaniesScalarFieldEnum>
  }


  /**
   * Companies findMany
   */
  export type CompaniesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Companies
     * 
    **/
    select?: CompaniesSelect | null
    /**
     * Filter, which Companies to fetch.
     * 
    **/
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     * 
    **/
    orderBy?: Enumerable<CompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     * 
    **/
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CompaniesScalarFieldEnum>
  }


  /**
   * Companies create
   */
  export type CompaniesCreateArgs = {
    /**
     * Select specific fields to fetch from the Companies
     * 
    **/
    select?: CompaniesSelect | null
    /**
     * The data needed to create a Companies.
     * 
    **/
    data: XOR<CompaniesCreateInput, CompaniesUncheckedCreateInput>
  }


  /**
   * Companies update
   */
  export type CompaniesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Companies
     * 
    **/
    select?: CompaniesSelect | null
    /**
     * The data needed to update a Companies.
     * 
    **/
    data: XOR<CompaniesUpdateInput, CompaniesUncheckedUpdateInput>
    /**
     * Choose, which Companies to update.
     * 
    **/
    where: CompaniesWhereUniqueInput
  }


  /**
   * Companies updateMany
   */
  export type CompaniesUpdateManyArgs = {
    /**
     * The data used to update Companies.
     * 
    **/
    data: XOR<CompaniesUpdateManyMutationInput, CompaniesUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     * 
    **/
    where?: CompaniesWhereInput
  }


  /**
   * Companies upsert
   */
  export type CompaniesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Companies
     * 
    **/
    select?: CompaniesSelect | null
    /**
     * The filter to search for the Companies to update in case it exists.
     * 
    **/
    where: CompaniesWhereUniqueInput
    /**
     * In case the Companies found by the `where` argument doesn't exist, create a new Companies with this data.
     * 
    **/
    create: XOR<CompaniesCreateInput, CompaniesUncheckedCreateInput>
    /**
     * In case the Companies was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CompaniesUpdateInput, CompaniesUncheckedUpdateInput>
  }


  /**
   * Companies delete
   */
  export type CompaniesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Companies
     * 
    **/
    select?: CompaniesSelect | null
    /**
     * Filter which Companies to delete.
     * 
    **/
    where: CompaniesWhereUniqueInput
  }


  /**
   * Companies deleteMany
   */
  export type CompaniesDeleteManyArgs = {
    /**
     * Filter which Companies to delete
     * 
    **/
    where?: CompaniesWhereInput
  }


  /**
   * Companies without action
   */
  export type CompaniesArgs = {
    /**
     * Select specific fields to fetch from the Companies
     * 
    **/
    select?: CompaniesSelect | null
  }



  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    uuid: string | null
    document: string | null
    email: string | null
    password: string | null
    preRegisterDate: Date | null
    tokePreRegister: string | null
    registerDate: Date | null
    tokenDiscount: string | null
    isActivated: boolean | null
    birthDate: Date | null
    parentUuid: string | null
    walletUuid: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    uuid: string | null
    document: string | null
    email: string | null
    password: string | null
    preRegisterDate: Date | null
    tokePreRegister: string | null
    registerDate: Date | null
    tokenDiscount: string | null
    isActivated: boolean | null
    birthDate: Date | null
    parentUuid: string | null
    walletUuid: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    uuid: number
    document: number
    email: number
    password: number
    preRegisterDate: number
    tokePreRegister: number
    registerDate: number
    tokenDiscount: number
    isActivated: number
    birthDate: number
    parentUuid: number
    walletUuid: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    uuid?: true
    document?: true
    email?: true
    password?: true
    preRegisterDate?: true
    tokePreRegister?: true
    registerDate?: true
    tokenDiscount?: true
    isActivated?: true
    birthDate?: true
    parentUuid?: true
    walletUuid?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    uuid?: true
    document?: true
    email?: true
    password?: true
    preRegisterDate?: true
    tokePreRegister?: true
    registerDate?: true
    tokenDiscount?: true
    isActivated?: true
    birthDate?: true
    parentUuid?: true
    walletUuid?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UsersCountAggregateInputType = {
    uuid?: true
    document?: true
    email?: true
    password?: true
    preRegisterDate?: true
    tokePreRegister?: true
    registerDate?: true
    tokenDiscount?: true
    isActivated?: true
    birthDate?: true
    parentUuid?: true
    walletUuid?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    uuid: string
    document: string
    email: string
    password: string
    preRegisterDate: Date
    tokePreRegister: string | null
    registerDate: Date | null
    tokenDiscount: string | null
    isActivated: boolean
    birthDate: Date | null
    parentUuid: string | null
    walletUuid: string
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect = {
    uuid?: boolean
    document?: boolean
    email?: boolean
    password?: boolean
    preRegisterDate?: boolean
    tokePreRegister?: boolean
    registerDate?: boolean
    tokenDiscount?: boolean
    isActivated?: boolean
    birthDate?: boolean
    parentUuid?: boolean
    parents?: boolean | UsersArgs
    childrens?: boolean | UsersFindManyArgs
    walletUuid?: boolean
    wallets?: boolean | walletsArgs
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type UsersInclude = {
    parents?: boolean | UsersArgs
    childrens?: boolean | UsersFindManyArgs
    wallets?: boolean | walletsArgs
    _count?: boolean | UsersCountOutputTypeArgs
  } 

  export type UsersGetPayload<S extends boolean | null | undefined | UsersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Users :
    S extends undefined ? never :
    S extends { include: any } & (UsersArgs | UsersFindManyArgs)
    ? Users  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'parents' ? UsersGetPayload<S['include'][P]> | null :
        P extends 'childrens' ? Array < UsersGetPayload<S['include'][P]>>  :
        P extends 'wallets' ? walletsGetPayload<S['include'][P]> | null :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UsersArgs | UsersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'parents' ? UsersGetPayload<S['select'][P]> | null :
        P extends 'childrens' ? Array < UsersGetPayload<S['select'][P]>>  :
        P extends 'wallets' ? walletsGetPayload<S['select'][P]> | null :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Users ? Users[P] : never
  } 
      : Users


  type UsersCountArgs = Merge<
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface UsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? Prisma__UsersClient<UsersGetPayload<T>> : Prisma__UsersClient<UsersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? Prisma__UsersClient<UsersGetPayload<T>> : Prisma__UsersClient<UsersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const usersWithUuidOnly = await prisma.users.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): PrismaPromise<Array<UsersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    parents<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    childrens<T extends UsersFindManyArgs= {}>(args?: Subset<T, UsersFindManyArgs>): PrismaPromise<Array<UsersGetPayload<T>>| Null>;

    wallets<T extends walletsArgs= {}>(args?: Subset<T, walletsArgs>): Prisma__walletsClient<walletsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Users base type for findUnique actions
   */
  export type UsersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where: UsersWhereUniqueInput
  }

  /**
   * Users: findUnique
   */
  export interface UsersFindUniqueArgs extends UsersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users base type for findFirst actions
   */
  export type UsersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * Users: findFirst
   */
  export interface UsersFindFirstArgs extends UsersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to create a Users.
     * 
    **/
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to update a Users.
     * 
    **/
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The filter to search for the Users to update in case it exists.
     * 
    **/
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     * 
    **/
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter which Users to delete.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
  }



  /**
   * Model wallets
   */


  export type AggregateWallets = {
    _count: WalletsCountAggregateOutputType | null
    _min: WalletsMinAggregateOutputType | null
    _max: WalletsMaxAggregateOutputType | null
  }

  export type WalletsMinAggregateOutputType = {
    uuid: string | null
    textContract: string | null
    version: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type WalletsMaxAggregateOutputType = {
    uuid: string | null
    textContract: string | null
    version: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type WalletsCountAggregateOutputType = {
    uuid: number
    textContract: number
    version: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type WalletsMinAggregateInputType = {
    uuid?: true
    textContract?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type WalletsMaxAggregateInputType = {
    uuid?: true
    textContract?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type WalletsCountAggregateInputType = {
    uuid?: true
    textContract?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type WalletsAggregateArgs = {
    /**
     * Filter which wallets to aggregate.
     * 
    **/
    where?: walletsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     * 
    **/
    orderBy?: Enumerable<walletsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: walletsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned wallets
    **/
    _count?: true | WalletsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletsMaxAggregateInputType
  }

  export type GetWalletsAggregateType<T extends WalletsAggregateArgs> = {
        [P in keyof T & keyof AggregateWallets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallets[P]>
      : GetScalarType<T[P], AggregateWallets[P]>
  }




  export type WalletsGroupByArgs = {
    where?: walletsWhereInput
    orderBy?: Enumerable<walletsOrderByWithAggregationInput>
    by: Array<WalletsScalarFieldEnum>
    having?: walletsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletsCountAggregateInputType | true
    _min?: WalletsMinAggregateInputType
    _max?: WalletsMaxAggregateInputType
  }


  export type WalletsGroupByOutputType = {
    uuid: string
    textContract: string
    version: string
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: WalletsCountAggregateOutputType | null
    _min: WalletsMinAggregateOutputType | null
    _max: WalletsMaxAggregateOutputType | null
  }

  type GetWalletsGroupByPayload<T extends WalletsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WalletsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletsGroupByOutputType[P]>
            : GetScalarType<T[P], WalletsGroupByOutputType[P]>
        }
      >
    >


  export type walletsSelect = {
    uuid?: boolean
    textContract?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    users?: boolean | UsersFindManyArgs
    beneficts?: boolean | benefictsFindManyArgs
    _count?: boolean | WalletsCountOutputTypeArgs
  }


  export type walletsInclude = {
    users?: boolean | UsersFindManyArgs
    beneficts?: boolean | benefictsFindManyArgs
    _count?: boolean | WalletsCountOutputTypeArgs
  } 

  export type walletsGetPayload<S extends boolean | null | undefined | walletsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? wallets :
    S extends undefined ? never :
    S extends { include: any } & (walletsArgs | walletsFindManyArgs)
    ? wallets  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? Array < UsersGetPayload<S['include'][P]>>  :
        P extends 'beneficts' ? Array < benefictsGetPayload<S['include'][P]>>  :
        P extends '_count' ? WalletsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (walletsArgs | walletsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? Array < UsersGetPayload<S['select'][P]>>  :
        P extends 'beneficts' ? Array < benefictsGetPayload<S['select'][P]>>  :
        P extends '_count' ? WalletsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof wallets ? wallets[P] : never
  } 
      : wallets


  type walletsCountArgs = Merge<
    Omit<walletsFindManyArgs, 'select' | 'include'> & {
      select?: WalletsCountAggregateInputType | true
    }
  >

  export interface walletsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Wallets that matches the filter.
     * @param {walletsFindUniqueArgs} args - Arguments to find a Wallets
     * @example
     * // Get one Wallets
     * const wallets = await prisma.wallets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends walletsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, walletsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'wallets'> extends True ? Prisma__walletsClient<walletsGetPayload<T>> : Prisma__walletsClient<walletsGetPayload<T> | null, null>

    /**
     * Find one Wallets that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {walletsFindUniqueOrThrowArgs} args - Arguments to find a Wallets
     * @example
     * // Get one Wallets
     * const wallets = await prisma.wallets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends walletsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, walletsFindUniqueOrThrowArgs>
    ): Prisma__walletsClient<walletsGetPayload<T>>

    /**
     * Find the first Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsFindFirstArgs} args - Arguments to find a Wallets
     * @example
     * // Get one Wallets
     * const wallets = await prisma.wallets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends walletsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, walletsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'wallets'> extends True ? Prisma__walletsClient<walletsGetPayload<T>> : Prisma__walletsClient<walletsGetPayload<T> | null, null>

    /**
     * Find the first Wallets that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsFindFirstOrThrowArgs} args - Arguments to find a Wallets
     * @example
     * // Get one Wallets
     * const wallets = await prisma.wallets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends walletsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, walletsFindFirstOrThrowArgs>
    ): Prisma__walletsClient<walletsGetPayload<T>>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallets.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallets.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const walletsWithUuidOnly = await prisma.wallets.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends walletsFindManyArgs>(
      args?: SelectSubset<T, walletsFindManyArgs>
    ): PrismaPromise<Array<walletsGetPayload<T>>>

    /**
     * Create a Wallets.
     * @param {walletsCreateArgs} args - Arguments to create a Wallets.
     * @example
     * // Create one Wallets
     * const Wallets = await prisma.wallets.create({
     *   data: {
     *     // ... data to create a Wallets
     *   }
     * })
     * 
    **/
    create<T extends walletsCreateArgs>(
      args: SelectSubset<T, walletsCreateArgs>
    ): Prisma__walletsClient<walletsGetPayload<T>>

    /**
     * Delete a Wallets.
     * @param {walletsDeleteArgs} args - Arguments to delete one Wallets.
     * @example
     * // Delete one Wallets
     * const Wallets = await prisma.wallets.delete({
     *   where: {
     *     // ... filter to delete one Wallets
     *   }
     * })
     * 
    **/
    delete<T extends walletsDeleteArgs>(
      args: SelectSubset<T, walletsDeleteArgs>
    ): Prisma__walletsClient<walletsGetPayload<T>>

    /**
     * Update one Wallets.
     * @param {walletsUpdateArgs} args - Arguments to update one Wallets.
     * @example
     * // Update one Wallets
     * const wallets = await prisma.wallets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends walletsUpdateArgs>(
      args: SelectSubset<T, walletsUpdateArgs>
    ): Prisma__walletsClient<walletsGetPayload<T>>

    /**
     * Delete zero or more Wallets.
     * @param {walletsDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends walletsDeleteManyArgs>(
      args?: SelectSubset<T, walletsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallets = await prisma.wallets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends walletsUpdateManyArgs>(
      args: SelectSubset<T, walletsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Wallets.
     * @param {walletsUpsertArgs} args - Arguments to update or create a Wallets.
     * @example
     * // Update or create a Wallets
     * const wallets = await prisma.wallets.upsert({
     *   create: {
     *     // ... data to create a Wallets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallets we want to update
     *   }
     * })
    **/
    upsert<T extends walletsUpsertArgs>(
      args: SelectSubset<T, walletsUpsertArgs>
    ): Prisma__walletsClient<walletsGetPayload<T>>

    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallets.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends walletsCountArgs>(
      args?: Subset<T, walletsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletsAggregateArgs>(args: Subset<T, WalletsAggregateArgs>): PrismaPromise<GetWalletsAggregateType<T>>

    /**
     * Group by Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletsGroupByArgs['orderBy'] }
        : { orderBy?: WalletsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for wallets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__walletsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UsersFindManyArgs= {}>(args?: Subset<T, UsersFindManyArgs>): PrismaPromise<Array<UsersGetPayload<T>>| Null>;

    beneficts<T extends benefictsFindManyArgs= {}>(args?: Subset<T, benefictsFindManyArgs>): PrismaPromise<Array<benefictsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * wallets base type for findUnique actions
   */
  export type walletsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the wallets
     * 
    **/
    select?: walletsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: walletsInclude | null
    /**
     * Filter, which wallets to fetch.
     * 
    **/
    where: walletsWhereUniqueInput
  }

  /**
   * wallets: findUnique
   */
  export interface walletsFindUniqueArgs extends walletsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * wallets findUniqueOrThrow
   */
  export type walletsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the wallets
     * 
    **/
    select?: walletsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: walletsInclude | null
    /**
     * Filter, which wallets to fetch.
     * 
    **/
    where: walletsWhereUniqueInput
  }


  /**
   * wallets base type for findFirst actions
   */
  export type walletsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the wallets
     * 
    **/
    select?: walletsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: walletsInclude | null
    /**
     * Filter, which wallets to fetch.
     * 
    **/
    where?: walletsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     * 
    **/
    orderBy?: Enumerable<walletsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallets.
     * 
    **/
    cursor?: walletsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallets.
     * 
    **/
    distinct?: Enumerable<WalletsScalarFieldEnum>
  }

  /**
   * wallets: findFirst
   */
  export interface walletsFindFirstArgs extends walletsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * wallets findFirstOrThrow
   */
  export type walletsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the wallets
     * 
    **/
    select?: walletsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: walletsInclude | null
    /**
     * Filter, which wallets to fetch.
     * 
    **/
    where?: walletsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     * 
    **/
    orderBy?: Enumerable<walletsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallets.
     * 
    **/
    cursor?: walletsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallets.
     * 
    **/
    distinct?: Enumerable<WalletsScalarFieldEnum>
  }


  /**
   * wallets findMany
   */
  export type walletsFindManyArgs = {
    /**
     * Select specific fields to fetch from the wallets
     * 
    **/
    select?: walletsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: walletsInclude | null
    /**
     * Filter, which wallets to fetch.
     * 
    **/
    where?: walletsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     * 
    **/
    orderBy?: Enumerable<walletsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing wallets.
     * 
    **/
    cursor?: walletsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WalletsScalarFieldEnum>
  }


  /**
   * wallets create
   */
  export type walletsCreateArgs = {
    /**
     * Select specific fields to fetch from the wallets
     * 
    **/
    select?: walletsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: walletsInclude | null
    /**
     * The data needed to create a wallets.
     * 
    **/
    data: XOR<walletsCreateInput, walletsUncheckedCreateInput>
  }


  /**
   * wallets update
   */
  export type walletsUpdateArgs = {
    /**
     * Select specific fields to fetch from the wallets
     * 
    **/
    select?: walletsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: walletsInclude | null
    /**
     * The data needed to update a wallets.
     * 
    **/
    data: XOR<walletsUpdateInput, walletsUncheckedUpdateInput>
    /**
     * Choose, which wallets to update.
     * 
    **/
    where: walletsWhereUniqueInput
  }


  /**
   * wallets updateMany
   */
  export type walletsUpdateManyArgs = {
    /**
     * The data used to update wallets.
     * 
    **/
    data: XOR<walletsUpdateManyMutationInput, walletsUncheckedUpdateManyInput>
    /**
     * Filter which wallets to update
     * 
    **/
    where?: walletsWhereInput
  }


  /**
   * wallets upsert
   */
  export type walletsUpsertArgs = {
    /**
     * Select specific fields to fetch from the wallets
     * 
    **/
    select?: walletsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: walletsInclude | null
    /**
     * The filter to search for the wallets to update in case it exists.
     * 
    **/
    where: walletsWhereUniqueInput
    /**
     * In case the wallets found by the `where` argument doesn't exist, create a new wallets with this data.
     * 
    **/
    create: XOR<walletsCreateInput, walletsUncheckedCreateInput>
    /**
     * In case the wallets was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<walletsUpdateInput, walletsUncheckedUpdateInput>
  }


  /**
   * wallets delete
   */
  export type walletsDeleteArgs = {
    /**
     * Select specific fields to fetch from the wallets
     * 
    **/
    select?: walletsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: walletsInclude | null
    /**
     * Filter which wallets to delete.
     * 
    **/
    where: walletsWhereUniqueInput
  }


  /**
   * wallets deleteMany
   */
  export type walletsDeleteManyArgs = {
    /**
     * Filter which wallets to delete
     * 
    **/
    where?: walletsWhereInput
  }


  /**
   * wallets without action
   */
  export type walletsArgs = {
    /**
     * Select specific fields to fetch from the wallets
     * 
    **/
    select?: walletsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: walletsInclude | null
  }



  /**
   * Model beneficts
   */


  export type AggregateBeneficts = {
    _count: BenefictsCountAggregateOutputType | null
    _avg: BenefictsAvgAggregateOutputType | null
    _sum: BenefictsSumAggregateOutputType | null
    _min: BenefictsMinAggregateOutputType | null
    _max: BenefictsMaxAggregateOutputType | null
  }

  export type BenefictsAvgAggregateOutputType = {
    value: number | null
  }

  export type BenefictsSumAggregateOutputType = {
    value: number | null
  }

  export type BenefictsMinAggregateOutputType = {
    uuid: string | null
    name: string | null
    description: string | null
    value: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    walletUuid: string | null
  }

  export type BenefictsMaxAggregateOutputType = {
    uuid: string | null
    name: string | null
    description: string | null
    value: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    walletUuid: string | null
  }

  export type BenefictsCountAggregateOutputType = {
    uuid: number
    name: number
    description: number
    value: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    walletUuid: number
    _all: number
  }


  export type BenefictsAvgAggregateInputType = {
    value?: true
  }

  export type BenefictsSumAggregateInputType = {
    value?: true
  }

  export type BenefictsMinAggregateInputType = {
    uuid?: true
    name?: true
    description?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    walletUuid?: true
  }

  export type BenefictsMaxAggregateInputType = {
    uuid?: true
    name?: true
    description?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    walletUuid?: true
  }

  export type BenefictsCountAggregateInputType = {
    uuid?: true
    name?: true
    description?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    walletUuid?: true
    _all?: true
  }

  export type BenefictsAggregateArgs = {
    /**
     * Filter which beneficts to aggregate.
     * 
    **/
    where?: benefictsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of beneficts to fetch.
     * 
    **/
    orderBy?: Enumerable<benefictsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: benefictsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` beneficts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` beneficts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned beneficts
    **/
    _count?: true | BenefictsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BenefictsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BenefictsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BenefictsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BenefictsMaxAggregateInputType
  }

  export type GetBenefictsAggregateType<T extends BenefictsAggregateArgs> = {
        [P in keyof T & keyof AggregateBeneficts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBeneficts[P]>
      : GetScalarType<T[P], AggregateBeneficts[P]>
  }




  export type BenefictsGroupByArgs = {
    where?: benefictsWhereInput
    orderBy?: Enumerable<benefictsOrderByWithAggregationInput>
    by: Array<BenefictsScalarFieldEnum>
    having?: benefictsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BenefictsCountAggregateInputType | true
    _avg?: BenefictsAvgAggregateInputType
    _sum?: BenefictsSumAggregateInputType
    _min?: BenefictsMinAggregateInputType
    _max?: BenefictsMaxAggregateInputType
  }


  export type BenefictsGroupByOutputType = {
    uuid: string
    name: string
    description: string
    value: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    walletUuid: string
    _count: BenefictsCountAggregateOutputType | null
    _avg: BenefictsAvgAggregateOutputType | null
    _sum: BenefictsSumAggregateOutputType | null
    _min: BenefictsMinAggregateOutputType | null
    _max: BenefictsMaxAggregateOutputType | null
  }

  type GetBenefictsGroupByPayload<T extends BenefictsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BenefictsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BenefictsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BenefictsGroupByOutputType[P]>
            : GetScalarType<T[P], BenefictsGroupByOutputType[P]>
        }
      >
    >


  export type benefictsSelect = {
    uuid?: boolean
    name?: boolean
    description?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    walletUuid?: boolean
    wallets?: boolean | walletsArgs
  }


  export type benefictsInclude = {
    wallets?: boolean | walletsArgs
  } 

  export type benefictsGetPayload<S extends boolean | null | undefined | benefictsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? beneficts :
    S extends undefined ? never :
    S extends { include: any } & (benefictsArgs | benefictsFindManyArgs)
    ? beneficts  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'wallets' ? walletsGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (benefictsArgs | benefictsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'wallets' ? walletsGetPayload<S['select'][P]> | null :  P extends keyof beneficts ? beneficts[P] : never
  } 
      : beneficts


  type benefictsCountArgs = Merge<
    Omit<benefictsFindManyArgs, 'select' | 'include'> & {
      select?: BenefictsCountAggregateInputType | true
    }
  >

  export interface benefictsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Beneficts that matches the filter.
     * @param {benefictsFindUniqueArgs} args - Arguments to find a Beneficts
     * @example
     * // Get one Beneficts
     * const beneficts = await prisma.beneficts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends benefictsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, benefictsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'beneficts'> extends True ? Prisma__benefictsClient<benefictsGetPayload<T>> : Prisma__benefictsClient<benefictsGetPayload<T> | null, null>

    /**
     * Find one Beneficts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {benefictsFindUniqueOrThrowArgs} args - Arguments to find a Beneficts
     * @example
     * // Get one Beneficts
     * const beneficts = await prisma.beneficts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends benefictsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, benefictsFindUniqueOrThrowArgs>
    ): Prisma__benefictsClient<benefictsGetPayload<T>>

    /**
     * Find the first Beneficts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefictsFindFirstArgs} args - Arguments to find a Beneficts
     * @example
     * // Get one Beneficts
     * const beneficts = await prisma.beneficts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends benefictsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, benefictsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'beneficts'> extends True ? Prisma__benefictsClient<benefictsGetPayload<T>> : Prisma__benefictsClient<benefictsGetPayload<T> | null, null>

    /**
     * Find the first Beneficts that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefictsFindFirstOrThrowArgs} args - Arguments to find a Beneficts
     * @example
     * // Get one Beneficts
     * const beneficts = await prisma.beneficts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends benefictsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, benefictsFindFirstOrThrowArgs>
    ): Prisma__benefictsClient<benefictsGetPayload<T>>

    /**
     * Find zero or more Beneficts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefictsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Beneficts
     * const beneficts = await prisma.beneficts.findMany()
     * 
     * // Get first 10 Beneficts
     * const beneficts = await prisma.beneficts.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const benefictsWithUuidOnly = await prisma.beneficts.findMany({ select: { uuid: true } })
     * 
    **/
    findMany<T extends benefictsFindManyArgs>(
      args?: SelectSubset<T, benefictsFindManyArgs>
    ): PrismaPromise<Array<benefictsGetPayload<T>>>

    /**
     * Create a Beneficts.
     * @param {benefictsCreateArgs} args - Arguments to create a Beneficts.
     * @example
     * // Create one Beneficts
     * const Beneficts = await prisma.beneficts.create({
     *   data: {
     *     // ... data to create a Beneficts
     *   }
     * })
     * 
    **/
    create<T extends benefictsCreateArgs>(
      args: SelectSubset<T, benefictsCreateArgs>
    ): Prisma__benefictsClient<benefictsGetPayload<T>>

    /**
     * Delete a Beneficts.
     * @param {benefictsDeleteArgs} args - Arguments to delete one Beneficts.
     * @example
     * // Delete one Beneficts
     * const Beneficts = await prisma.beneficts.delete({
     *   where: {
     *     // ... filter to delete one Beneficts
     *   }
     * })
     * 
    **/
    delete<T extends benefictsDeleteArgs>(
      args: SelectSubset<T, benefictsDeleteArgs>
    ): Prisma__benefictsClient<benefictsGetPayload<T>>

    /**
     * Update one Beneficts.
     * @param {benefictsUpdateArgs} args - Arguments to update one Beneficts.
     * @example
     * // Update one Beneficts
     * const beneficts = await prisma.beneficts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends benefictsUpdateArgs>(
      args: SelectSubset<T, benefictsUpdateArgs>
    ): Prisma__benefictsClient<benefictsGetPayload<T>>

    /**
     * Delete zero or more Beneficts.
     * @param {benefictsDeleteManyArgs} args - Arguments to filter Beneficts to delete.
     * @example
     * // Delete a few Beneficts
     * const { count } = await prisma.beneficts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends benefictsDeleteManyArgs>(
      args?: SelectSubset<T, benefictsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Beneficts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefictsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Beneficts
     * const beneficts = await prisma.beneficts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends benefictsUpdateManyArgs>(
      args: SelectSubset<T, benefictsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Beneficts.
     * @param {benefictsUpsertArgs} args - Arguments to update or create a Beneficts.
     * @example
     * // Update or create a Beneficts
     * const beneficts = await prisma.beneficts.upsert({
     *   create: {
     *     // ... data to create a Beneficts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Beneficts we want to update
     *   }
     * })
    **/
    upsert<T extends benefictsUpsertArgs>(
      args: SelectSubset<T, benefictsUpsertArgs>
    ): Prisma__benefictsClient<benefictsGetPayload<T>>

    /**
     * Count the number of Beneficts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefictsCountArgs} args - Arguments to filter Beneficts to count.
     * @example
     * // Count the number of Beneficts
     * const count = await prisma.beneficts.count({
     *   where: {
     *     // ... the filter for the Beneficts we want to count
     *   }
     * })
    **/
    count<T extends benefictsCountArgs>(
      args?: Subset<T, benefictsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BenefictsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Beneficts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BenefictsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BenefictsAggregateArgs>(args: Subset<T, BenefictsAggregateArgs>): PrismaPromise<GetBenefictsAggregateType<T>>

    /**
     * Group by Beneficts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BenefictsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BenefictsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BenefictsGroupByArgs['orderBy'] }
        : { orderBy?: BenefictsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BenefictsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBenefictsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for beneficts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__benefictsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    wallets<T extends walletsArgs= {}>(args?: Subset<T, walletsArgs>): Prisma__walletsClient<walletsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * beneficts base type for findUnique actions
   */
  export type benefictsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the beneficts
     * 
    **/
    select?: benefictsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: benefictsInclude | null
    /**
     * Filter, which beneficts to fetch.
     * 
    **/
    where: benefictsWhereUniqueInput
  }

  /**
   * beneficts: findUnique
   */
  export interface benefictsFindUniqueArgs extends benefictsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * beneficts findUniqueOrThrow
   */
  export type benefictsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the beneficts
     * 
    **/
    select?: benefictsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: benefictsInclude | null
    /**
     * Filter, which beneficts to fetch.
     * 
    **/
    where: benefictsWhereUniqueInput
  }


  /**
   * beneficts base type for findFirst actions
   */
  export type benefictsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the beneficts
     * 
    **/
    select?: benefictsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: benefictsInclude | null
    /**
     * Filter, which beneficts to fetch.
     * 
    **/
    where?: benefictsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of beneficts to fetch.
     * 
    **/
    orderBy?: Enumerable<benefictsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for beneficts.
     * 
    **/
    cursor?: benefictsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` beneficts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` beneficts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of beneficts.
     * 
    **/
    distinct?: Enumerable<BenefictsScalarFieldEnum>
  }

  /**
   * beneficts: findFirst
   */
  export interface benefictsFindFirstArgs extends benefictsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * beneficts findFirstOrThrow
   */
  export type benefictsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the beneficts
     * 
    **/
    select?: benefictsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: benefictsInclude | null
    /**
     * Filter, which beneficts to fetch.
     * 
    **/
    where?: benefictsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of beneficts to fetch.
     * 
    **/
    orderBy?: Enumerable<benefictsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for beneficts.
     * 
    **/
    cursor?: benefictsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` beneficts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` beneficts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of beneficts.
     * 
    **/
    distinct?: Enumerable<BenefictsScalarFieldEnum>
  }


  /**
   * beneficts findMany
   */
  export type benefictsFindManyArgs = {
    /**
     * Select specific fields to fetch from the beneficts
     * 
    **/
    select?: benefictsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: benefictsInclude | null
    /**
     * Filter, which beneficts to fetch.
     * 
    **/
    where?: benefictsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of beneficts to fetch.
     * 
    **/
    orderBy?: Enumerable<benefictsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing beneficts.
     * 
    **/
    cursor?: benefictsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` beneficts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` beneficts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BenefictsScalarFieldEnum>
  }


  /**
   * beneficts create
   */
  export type benefictsCreateArgs = {
    /**
     * Select specific fields to fetch from the beneficts
     * 
    **/
    select?: benefictsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: benefictsInclude | null
    /**
     * The data needed to create a beneficts.
     * 
    **/
    data: XOR<benefictsCreateInput, benefictsUncheckedCreateInput>
  }


  /**
   * beneficts update
   */
  export type benefictsUpdateArgs = {
    /**
     * Select specific fields to fetch from the beneficts
     * 
    **/
    select?: benefictsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: benefictsInclude | null
    /**
     * The data needed to update a beneficts.
     * 
    **/
    data: XOR<benefictsUpdateInput, benefictsUncheckedUpdateInput>
    /**
     * Choose, which beneficts to update.
     * 
    **/
    where: benefictsWhereUniqueInput
  }


  /**
   * beneficts updateMany
   */
  export type benefictsUpdateManyArgs = {
    /**
     * The data used to update beneficts.
     * 
    **/
    data: XOR<benefictsUpdateManyMutationInput, benefictsUncheckedUpdateManyInput>
    /**
     * Filter which beneficts to update
     * 
    **/
    where?: benefictsWhereInput
  }


  /**
   * beneficts upsert
   */
  export type benefictsUpsertArgs = {
    /**
     * Select specific fields to fetch from the beneficts
     * 
    **/
    select?: benefictsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: benefictsInclude | null
    /**
     * The filter to search for the beneficts to update in case it exists.
     * 
    **/
    where: benefictsWhereUniqueInput
    /**
     * In case the beneficts found by the `where` argument doesn't exist, create a new beneficts with this data.
     * 
    **/
    create: XOR<benefictsCreateInput, benefictsUncheckedCreateInput>
    /**
     * In case the beneficts was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<benefictsUpdateInput, benefictsUncheckedUpdateInput>
  }


  /**
   * beneficts delete
   */
  export type benefictsDeleteArgs = {
    /**
     * Select specific fields to fetch from the beneficts
     * 
    **/
    select?: benefictsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: benefictsInclude | null
    /**
     * Filter which beneficts to delete.
     * 
    **/
    where: benefictsWhereUniqueInput
  }


  /**
   * beneficts deleteMany
   */
  export type benefictsDeleteManyArgs = {
    /**
     * Filter which beneficts to delete
     * 
    **/
    where?: benefictsWhereInput
  }


  /**
   * beneficts without action
   */
  export type benefictsArgs = {
    /**
     * Select specific fields to fetch from the beneficts
     * 
    **/
    select?: benefictsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: benefictsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BenefictsScalarFieldEnum: {
    uuid: 'uuid',
    name: 'name',
    description: 'description',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    walletUuid: 'walletUuid'
  };

  export type BenefictsScalarFieldEnum = (typeof BenefictsScalarFieldEnum)[keyof typeof BenefictsScalarFieldEnum]


  export const CompaniesScalarFieldEnum: {
    uuid: 'uuid',
    name: 'name',
    fancyName: 'fancyName',
    corporateName: 'corporateName',
    document: 'document',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type CompaniesScalarFieldEnum = (typeof CompaniesScalarFieldEnum)[keyof typeof CompaniesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    uuid: 'uuid',
    document: 'document',
    email: 'email',
    password: 'password',
    preRegisterDate: 'preRegisterDate',
    tokePreRegister: 'tokePreRegister',
    registerDate: 'registerDate',
    tokenDiscount: 'tokenDiscount',
    isActivated: 'isActivated',
    birthDate: 'birthDate',
    parentUuid: 'parentUuid',
    walletUuid: 'walletUuid',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const WalletsScalarFieldEnum: {
    uuid: 'uuid',
    textContract: 'textContract',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type WalletsScalarFieldEnum = (typeof WalletsScalarFieldEnum)[keyof typeof WalletsScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type CompaniesWhereInput = {
    AND?: Enumerable<CompaniesWhereInput>
    OR?: Enumerable<CompaniesWhereInput>
    NOT?: Enumerable<CompaniesWhereInput>
    uuid?: StringFilter | string
    name?: StringFilter | string
    fancyName?: StringFilter | string
    corporateName?: StringFilter | string
    document?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deletedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type CompaniesOrderByWithRelationInput = {
    uuid?: SortOrder
    name?: SortOrder
    fancyName?: SortOrder
    corporateName?: SortOrder
    document?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CompaniesWhereUniqueInput = {
    uuid?: string
  }

  export type CompaniesOrderByWithAggregationInput = {
    uuid?: SortOrder
    name?: SortOrder
    fancyName?: SortOrder
    corporateName?: SortOrder
    document?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: CompaniesCountOrderByAggregateInput
    _max?: CompaniesMaxOrderByAggregateInput
    _min?: CompaniesMinOrderByAggregateInput
  }

  export type CompaniesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompaniesScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompaniesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompaniesScalarWhereWithAggregatesInput>
    uuid?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    fancyName?: StringWithAggregatesFilter | string
    corporateName?: StringWithAggregatesFilter | string
    document?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    uuid?: StringFilter | string
    document?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    preRegisterDate?: DateTimeFilter | Date | string
    tokePreRegister?: StringNullableFilter | string | null
    registerDate?: DateTimeNullableFilter | Date | string | null
    tokenDiscount?: StringNullableFilter | string | null
    isActivated?: BoolFilter | boolean
    birthDate?: DateTimeNullableFilter | Date | string | null
    parentUuid?: StringNullableFilter | string | null
    parents?: XOR<UsersRelationFilter, UsersWhereInput> | null
    childrens?: UsersListRelationFilter
    walletUuid?: StringFilter | string
    wallets?: XOR<WalletsRelationFilter, walletsWhereInput> | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deletedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type UsersOrderByWithRelationInput = {
    uuid?: SortOrder
    document?: SortOrder
    email?: SortOrder
    password?: SortOrder
    preRegisterDate?: SortOrder
    tokePreRegister?: SortOrder
    registerDate?: SortOrder
    tokenDiscount?: SortOrder
    isActivated?: SortOrder
    birthDate?: SortOrder
    parentUuid?: SortOrder
    parents?: UsersOrderByWithRelationInput
    childrens?: UsersOrderByRelationAggregateInput
    walletUuid?: SortOrder
    wallets?: walletsOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UsersWhereUniqueInput = {
    uuid?: string
    document?: string
    email?: string
  }

  export type UsersOrderByWithAggregationInput = {
    uuid?: SortOrder
    document?: SortOrder
    email?: SortOrder
    password?: SortOrder
    preRegisterDate?: SortOrder
    tokePreRegister?: SortOrder
    registerDate?: SortOrder
    tokenDiscount?: SortOrder
    isActivated?: SortOrder
    birthDate?: SortOrder
    parentUuid?: SortOrder
    walletUuid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    uuid?: StringWithAggregatesFilter | string
    document?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    preRegisterDate?: DateTimeWithAggregatesFilter | Date | string
    tokePreRegister?: StringNullableWithAggregatesFilter | string | null
    registerDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    tokenDiscount?: StringNullableWithAggregatesFilter | string | null
    isActivated?: BoolWithAggregatesFilter | boolean
    birthDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    parentUuid?: StringNullableWithAggregatesFilter | string | null
    walletUuid?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type walletsWhereInput = {
    AND?: Enumerable<walletsWhereInput>
    OR?: Enumerable<walletsWhereInput>
    NOT?: Enumerable<walletsWhereInput>
    uuid?: StringFilter | string
    textContract?: StringFilter | string
    version?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deletedAt?: DateTimeNullableFilter | Date | string | null
    users?: UsersListRelationFilter
    beneficts?: BenefictsListRelationFilter
  }

  export type walletsOrderByWithRelationInput = {
    uuid?: SortOrder
    textContract?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    users?: UsersOrderByRelationAggregateInput
    beneficts?: benefictsOrderByRelationAggregateInput
  }

  export type walletsWhereUniqueInput = {
    uuid?: string
  }

  export type walletsOrderByWithAggregationInput = {
    uuid?: SortOrder
    textContract?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: walletsCountOrderByAggregateInput
    _max?: walletsMaxOrderByAggregateInput
    _min?: walletsMinOrderByAggregateInput
  }

  export type walletsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<walletsScalarWhereWithAggregatesInput>
    OR?: Enumerable<walletsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<walletsScalarWhereWithAggregatesInput>
    uuid?: StringWithAggregatesFilter | string
    textContract?: StringWithAggregatesFilter | string
    version?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type benefictsWhereInput = {
    AND?: Enumerable<benefictsWhereInput>
    OR?: Enumerable<benefictsWhereInput>
    NOT?: Enumerable<benefictsWhereInput>
    uuid?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    value?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deletedAt?: DateTimeNullableFilter | Date | string | null
    walletUuid?: StringFilter | string
    wallets?: XOR<WalletsRelationFilter, walletsWhereInput> | null
  }

  export type benefictsOrderByWithRelationInput = {
    uuid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    walletUuid?: SortOrder
    wallets?: walletsOrderByWithRelationInput
  }

  export type benefictsWhereUniqueInput = {
    uuid?: string
  }

  export type benefictsOrderByWithAggregationInput = {
    uuid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    walletUuid?: SortOrder
    _count?: benefictsCountOrderByAggregateInput
    _avg?: benefictsAvgOrderByAggregateInput
    _max?: benefictsMaxOrderByAggregateInput
    _min?: benefictsMinOrderByAggregateInput
    _sum?: benefictsSumOrderByAggregateInput
  }

  export type benefictsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<benefictsScalarWhereWithAggregatesInput>
    OR?: Enumerable<benefictsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<benefictsScalarWhereWithAggregatesInput>
    uuid?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    value?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    walletUuid?: StringWithAggregatesFilter | string
  }

  export type CompaniesCreateInput = {
    uuid?: string
    name: string
    fancyName: string
    corporateName: string
    document: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CompaniesUncheckedCreateInput = {
    uuid?: string
    name: string
    fancyName: string
    corporateName: string
    document: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CompaniesUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fancyName?: StringFieldUpdateOperationsInput | string
    corporateName?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompaniesUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fancyName?: StringFieldUpdateOperationsInput | string
    corporateName?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompaniesUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fancyName?: StringFieldUpdateOperationsInput | string
    corporateName?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompaniesUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fancyName?: StringFieldUpdateOperationsInput | string
    corporateName?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersCreateInput = {
    uuid?: string
    document: string
    email: string
    password: string
    preRegisterDate?: Date | string
    tokePreRegister?: string | null
    registerDate?: Date | string | null
    tokenDiscount?: string | null
    isActivated?: boolean
    birthDate?: Date | string | null
    parents?: UsersCreateNestedOneWithoutChildrensInput
    childrens?: UsersCreateNestedManyWithoutParentsInput
    wallets?: walletsCreateNestedOneWithoutUsersInput
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UsersUncheckedCreateInput = {
    uuid?: string
    document: string
    email: string
    password: string
    preRegisterDate?: Date | string
    tokePreRegister?: string | null
    registerDate?: Date | string | null
    tokenDiscount?: string | null
    isActivated?: boolean
    birthDate?: Date | string | null
    parentUuid?: string | null
    childrens?: UsersUncheckedCreateNestedManyWithoutParentsInput
    walletUuid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UsersUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parents?: UsersUpdateOneWithoutChildrensNestedInput
    childrens?: UsersUpdateManyWithoutParentsNestedInput
    wallets?: walletsUpdateOneWithoutUsersNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentUuid?: NullableStringFieldUpdateOperationsInput | string | null
    childrens?: UsersUncheckedUpdateManyWithoutParentsNestedInput
    walletUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentUuid?: NullableStringFieldUpdateOperationsInput | string | null
    walletUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type walletsCreateInput = {
    uuid?: string
    textContract: string
    version: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UsersCreateNestedManyWithoutWalletsInput
    beneficts?: benefictsCreateNestedManyWithoutWalletsInput
  }

  export type walletsUncheckedCreateInput = {
    uuid?: string
    textContract: string
    version: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UsersUncheckedCreateNestedManyWithoutWalletsInput
    beneficts?: benefictsUncheckedCreateNestedManyWithoutWalletsInput
  }

  export type walletsUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    textContract?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UsersUpdateManyWithoutWalletsNestedInput
    beneficts?: benefictsUpdateManyWithoutWalletsNestedInput
  }

  export type walletsUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    textContract?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UsersUncheckedUpdateManyWithoutWalletsNestedInput
    beneficts?: benefictsUncheckedUpdateManyWithoutWalletsNestedInput
  }

  export type walletsUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    textContract?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type walletsUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    textContract?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type benefictsCreateInput = {
    uuid?: string
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    wallets?: walletsCreateNestedOneWithoutBenefictsInput
  }

  export type benefictsUncheckedCreateInput = {
    uuid?: string
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    walletUuid: string
  }

  export type benefictsUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wallets?: walletsUpdateOneWithoutBenefictsNestedInput
  }

  export type benefictsUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    walletUuid?: StringFieldUpdateOperationsInput | string
  }

  export type benefictsUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type benefictsUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    walletUuid?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type CompaniesCountOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
    fancyName?: SortOrder
    corporateName?: SortOrder
    document?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CompaniesMaxOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
    fancyName?: SortOrder
    corporateName?: SortOrder
    document?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CompaniesMinOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
    fancyName?: SortOrder
    corporateName?: SortOrder
    document?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type WalletsRelationFilter = {
    is?: walletsWhereInput | null
    isNot?: walletsWhereInput | null
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    uuid?: SortOrder
    document?: SortOrder
    email?: SortOrder
    password?: SortOrder
    preRegisterDate?: SortOrder
    tokePreRegister?: SortOrder
    registerDate?: SortOrder
    tokenDiscount?: SortOrder
    isActivated?: SortOrder
    birthDate?: SortOrder
    parentUuid?: SortOrder
    walletUuid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    uuid?: SortOrder
    document?: SortOrder
    email?: SortOrder
    password?: SortOrder
    preRegisterDate?: SortOrder
    tokePreRegister?: SortOrder
    registerDate?: SortOrder
    tokenDiscount?: SortOrder
    isActivated?: SortOrder
    birthDate?: SortOrder
    parentUuid?: SortOrder
    walletUuid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    uuid?: SortOrder
    document?: SortOrder
    email?: SortOrder
    password?: SortOrder
    preRegisterDate?: SortOrder
    tokePreRegister?: SortOrder
    registerDate?: SortOrder
    tokenDiscount?: SortOrder
    isActivated?: SortOrder
    birthDate?: SortOrder
    parentUuid?: SortOrder
    walletUuid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type BenefictsListRelationFilter = {
    every?: benefictsWhereInput
    some?: benefictsWhereInput
    none?: benefictsWhereInput
  }

  export type benefictsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type walletsCountOrderByAggregateInput = {
    uuid?: SortOrder
    textContract?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type walletsMaxOrderByAggregateInput = {
    uuid?: SortOrder
    textContract?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type walletsMinOrderByAggregateInput = {
    uuid?: SortOrder
    textContract?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type benefictsCountOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    walletUuid?: SortOrder
  }

  export type benefictsAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type benefictsMaxOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    walletUuid?: SortOrder
  }

  export type benefictsMinOrderByAggregateInput = {
    uuid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    walletUuid?: SortOrder
  }

  export type benefictsSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UsersCreateNestedOneWithoutChildrensInput = {
    create?: XOR<UsersCreateWithoutChildrensInput, UsersUncheckedCreateWithoutChildrensInput>
    connectOrCreate?: UsersCreateOrConnectWithoutChildrensInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedManyWithoutParentsInput = {
    create?: XOR<Enumerable<UsersCreateWithoutParentsInput>, Enumerable<UsersUncheckedCreateWithoutParentsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutParentsInput>
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type walletsCreateNestedOneWithoutUsersInput = {
    create?: XOR<walletsCreateWithoutUsersInput, walletsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: walletsCreateOrConnectWithoutUsersInput
    connect?: walletsWhereUniqueInput
  }

  export type UsersUncheckedCreateNestedManyWithoutParentsInput = {
    create?: XOR<Enumerable<UsersCreateWithoutParentsInput>, Enumerable<UsersUncheckedCreateWithoutParentsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutParentsInput>
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsersUpdateOneWithoutChildrensNestedInput = {
    create?: XOR<UsersCreateWithoutChildrensInput, UsersUncheckedCreateWithoutChildrensInput>
    connectOrCreate?: UsersCreateOrConnectWithoutChildrensInput
    upsert?: UsersUpsertWithoutChildrensInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutChildrensInput, UsersUncheckedUpdateWithoutChildrensInput>
  }

  export type UsersUpdateManyWithoutParentsNestedInput = {
    create?: XOR<Enumerable<UsersCreateWithoutParentsInput>, Enumerable<UsersUncheckedCreateWithoutParentsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutParentsInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutParentsInput>
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutParentsInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutParentsInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type walletsUpdateOneWithoutUsersNestedInput = {
    create?: XOR<walletsCreateWithoutUsersInput, walletsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: walletsCreateOrConnectWithoutUsersInput
    upsert?: walletsUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: walletsWhereUniqueInput
    update?: XOR<walletsUpdateWithoutUsersInput, walletsUncheckedUpdateWithoutUsersInput>
  }

  export type UsersUncheckedUpdateManyWithoutParentsNestedInput = {
    create?: XOR<Enumerable<UsersCreateWithoutParentsInput>, Enumerable<UsersUncheckedCreateWithoutParentsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutParentsInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutParentsInput>
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutParentsInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutParentsInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type UsersCreateNestedManyWithoutWalletsInput = {
    create?: XOR<Enumerable<UsersCreateWithoutWalletsInput>, Enumerable<UsersUncheckedCreateWithoutWalletsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutWalletsInput>
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type benefictsCreateNestedManyWithoutWalletsInput = {
    create?: XOR<Enumerable<benefictsCreateWithoutWalletsInput>, Enumerable<benefictsUncheckedCreateWithoutWalletsInput>>
    connectOrCreate?: Enumerable<benefictsCreateOrConnectWithoutWalletsInput>
    connect?: Enumerable<benefictsWhereUniqueInput>
  }

  export type UsersUncheckedCreateNestedManyWithoutWalletsInput = {
    create?: XOR<Enumerable<UsersCreateWithoutWalletsInput>, Enumerable<UsersUncheckedCreateWithoutWalletsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutWalletsInput>
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type benefictsUncheckedCreateNestedManyWithoutWalletsInput = {
    create?: XOR<Enumerable<benefictsCreateWithoutWalletsInput>, Enumerable<benefictsUncheckedCreateWithoutWalletsInput>>
    connectOrCreate?: Enumerable<benefictsCreateOrConnectWithoutWalletsInput>
    connect?: Enumerable<benefictsWhereUniqueInput>
  }

  export type UsersUpdateManyWithoutWalletsNestedInput = {
    create?: XOR<Enumerable<UsersCreateWithoutWalletsInput>, Enumerable<UsersUncheckedCreateWithoutWalletsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutWalletsInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutWalletsInput>
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutWalletsInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutWalletsInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type benefictsUpdateManyWithoutWalletsNestedInput = {
    create?: XOR<Enumerable<benefictsCreateWithoutWalletsInput>, Enumerable<benefictsUncheckedCreateWithoutWalletsInput>>
    connectOrCreate?: Enumerable<benefictsCreateOrConnectWithoutWalletsInput>
    upsert?: Enumerable<benefictsUpsertWithWhereUniqueWithoutWalletsInput>
    set?: Enumerable<benefictsWhereUniqueInput>
    disconnect?: Enumerable<benefictsWhereUniqueInput>
    delete?: Enumerable<benefictsWhereUniqueInput>
    connect?: Enumerable<benefictsWhereUniqueInput>
    update?: Enumerable<benefictsUpdateWithWhereUniqueWithoutWalletsInput>
    updateMany?: Enumerable<benefictsUpdateManyWithWhereWithoutWalletsInput>
    deleteMany?: Enumerable<benefictsScalarWhereInput>
  }

  export type UsersUncheckedUpdateManyWithoutWalletsNestedInput = {
    create?: XOR<Enumerable<UsersCreateWithoutWalletsInput>, Enumerable<UsersUncheckedCreateWithoutWalletsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutWalletsInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutWalletsInput>
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutWalletsInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutWalletsInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type benefictsUncheckedUpdateManyWithoutWalletsNestedInput = {
    create?: XOR<Enumerable<benefictsCreateWithoutWalletsInput>, Enumerable<benefictsUncheckedCreateWithoutWalletsInput>>
    connectOrCreate?: Enumerable<benefictsCreateOrConnectWithoutWalletsInput>
    upsert?: Enumerable<benefictsUpsertWithWhereUniqueWithoutWalletsInput>
    set?: Enumerable<benefictsWhereUniqueInput>
    disconnect?: Enumerable<benefictsWhereUniqueInput>
    delete?: Enumerable<benefictsWhereUniqueInput>
    connect?: Enumerable<benefictsWhereUniqueInput>
    update?: Enumerable<benefictsUpdateWithWhereUniqueWithoutWalletsInput>
    updateMany?: Enumerable<benefictsUpdateManyWithWhereWithoutWalletsInput>
    deleteMany?: Enumerable<benefictsScalarWhereInput>
  }

  export type walletsCreateNestedOneWithoutBenefictsInput = {
    create?: XOR<walletsCreateWithoutBenefictsInput, walletsUncheckedCreateWithoutBenefictsInput>
    connectOrCreate?: walletsCreateOrConnectWithoutBenefictsInput
    connect?: walletsWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type walletsUpdateOneWithoutBenefictsNestedInput = {
    create?: XOR<walletsCreateWithoutBenefictsInput, walletsUncheckedCreateWithoutBenefictsInput>
    connectOrCreate?: walletsCreateOrConnectWithoutBenefictsInput
    upsert?: walletsUpsertWithoutBenefictsInput
    disconnect?: boolean
    delete?: boolean
    connect?: walletsWhereUniqueInput
    update?: XOR<walletsUpdateWithoutBenefictsInput, walletsUncheckedUpdateWithoutBenefictsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type UsersCreateWithoutChildrensInput = {
    uuid?: string
    document: string
    email: string
    password: string
    preRegisterDate?: Date | string
    tokePreRegister?: string | null
    registerDate?: Date | string | null
    tokenDiscount?: string | null
    isActivated?: boolean
    birthDate?: Date | string | null
    parents?: UsersCreateNestedOneWithoutChildrensInput
    wallets?: walletsCreateNestedOneWithoutUsersInput
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UsersUncheckedCreateWithoutChildrensInput = {
    uuid?: string
    document: string
    email: string
    password: string
    preRegisterDate?: Date | string
    tokePreRegister?: string | null
    registerDate?: Date | string | null
    tokenDiscount?: string | null
    isActivated?: boolean
    birthDate?: Date | string | null
    parentUuid?: string | null
    walletUuid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UsersCreateOrConnectWithoutChildrensInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutChildrensInput, UsersUncheckedCreateWithoutChildrensInput>
  }

  export type UsersCreateWithoutParentsInput = {
    uuid?: string
    document: string
    email: string
    password: string
    preRegisterDate?: Date | string
    tokePreRegister?: string | null
    registerDate?: Date | string | null
    tokenDiscount?: string | null
    isActivated?: boolean
    birthDate?: Date | string | null
    childrens?: UsersCreateNestedManyWithoutParentsInput
    wallets?: walletsCreateNestedOneWithoutUsersInput
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UsersUncheckedCreateWithoutParentsInput = {
    uuid?: string
    document: string
    email: string
    password: string
    preRegisterDate?: Date | string
    tokePreRegister?: string | null
    registerDate?: Date | string | null
    tokenDiscount?: string | null
    isActivated?: boolean
    birthDate?: Date | string | null
    childrens?: UsersUncheckedCreateNestedManyWithoutParentsInput
    walletUuid: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UsersCreateOrConnectWithoutParentsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutParentsInput, UsersUncheckedCreateWithoutParentsInput>
  }

  export type walletsCreateWithoutUsersInput = {
    uuid?: string
    textContract: string
    version: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    beneficts?: benefictsCreateNestedManyWithoutWalletsInput
  }

  export type walletsUncheckedCreateWithoutUsersInput = {
    uuid?: string
    textContract: string
    version: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    beneficts?: benefictsUncheckedCreateNestedManyWithoutWalletsInput
  }

  export type walletsCreateOrConnectWithoutUsersInput = {
    where: walletsWhereUniqueInput
    create: XOR<walletsCreateWithoutUsersInput, walletsUncheckedCreateWithoutUsersInput>
  }

  export type UsersUpsertWithoutChildrensInput = {
    update: XOR<UsersUpdateWithoutChildrensInput, UsersUncheckedUpdateWithoutChildrensInput>
    create: XOR<UsersCreateWithoutChildrensInput, UsersUncheckedCreateWithoutChildrensInput>
  }

  export type UsersUpdateWithoutChildrensInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parents?: UsersUpdateOneWithoutChildrensNestedInput
    wallets?: walletsUpdateOneWithoutUsersNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateWithoutChildrensInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentUuid?: NullableStringFieldUpdateOperationsInput | string | null
    walletUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUpsertWithWhereUniqueWithoutParentsInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutParentsInput, UsersUncheckedUpdateWithoutParentsInput>
    create: XOR<UsersCreateWithoutParentsInput, UsersUncheckedCreateWithoutParentsInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutParentsInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutParentsInput, UsersUncheckedUpdateWithoutParentsInput>
  }

  export type UsersUpdateManyWithWhereWithoutParentsInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutChildrensInput>
  }

  export type UsersScalarWhereInput = {
    AND?: Enumerable<UsersScalarWhereInput>
    OR?: Enumerable<UsersScalarWhereInput>
    NOT?: Enumerable<UsersScalarWhereInput>
    uuid?: StringFilter | string
    document?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    preRegisterDate?: DateTimeFilter | Date | string
    tokePreRegister?: StringNullableFilter | string | null
    registerDate?: DateTimeNullableFilter | Date | string | null
    tokenDiscount?: StringNullableFilter | string | null
    isActivated?: BoolFilter | boolean
    birthDate?: DateTimeNullableFilter | Date | string | null
    parentUuid?: StringNullableFilter | string | null
    walletUuid?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deletedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type walletsUpsertWithoutUsersInput = {
    update: XOR<walletsUpdateWithoutUsersInput, walletsUncheckedUpdateWithoutUsersInput>
    create: XOR<walletsCreateWithoutUsersInput, walletsUncheckedCreateWithoutUsersInput>
  }

  export type walletsUpdateWithoutUsersInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    textContract?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beneficts?: benefictsUpdateManyWithoutWalletsNestedInput
  }

  export type walletsUncheckedUpdateWithoutUsersInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    textContract?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beneficts?: benefictsUncheckedUpdateManyWithoutWalletsNestedInput
  }

  export type UsersCreateWithoutWalletsInput = {
    uuid?: string
    document: string
    email: string
    password: string
    preRegisterDate?: Date | string
    tokePreRegister?: string | null
    registerDate?: Date | string | null
    tokenDiscount?: string | null
    isActivated?: boolean
    birthDate?: Date | string | null
    parents?: UsersCreateNestedOneWithoutChildrensInput
    childrens?: UsersCreateNestedManyWithoutParentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UsersUncheckedCreateWithoutWalletsInput = {
    uuid?: string
    document: string
    email: string
    password: string
    preRegisterDate?: Date | string
    tokePreRegister?: string | null
    registerDate?: Date | string | null
    tokenDiscount?: string | null
    isActivated?: boolean
    birthDate?: Date | string | null
    parentUuid?: string | null
    childrens?: UsersUncheckedCreateNestedManyWithoutParentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UsersCreateOrConnectWithoutWalletsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutWalletsInput, UsersUncheckedCreateWithoutWalletsInput>
  }

  export type benefictsCreateWithoutWalletsInput = {
    uuid?: string
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type benefictsUncheckedCreateWithoutWalletsInput = {
    uuid?: string
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type benefictsCreateOrConnectWithoutWalletsInput = {
    where: benefictsWhereUniqueInput
    create: XOR<benefictsCreateWithoutWalletsInput, benefictsUncheckedCreateWithoutWalletsInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutWalletsInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutWalletsInput, UsersUncheckedUpdateWithoutWalletsInput>
    create: XOR<UsersCreateWithoutWalletsInput, UsersUncheckedCreateWithoutWalletsInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutWalletsInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutWalletsInput, UsersUncheckedUpdateWithoutWalletsInput>
  }

  export type UsersUpdateManyWithWhereWithoutWalletsInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutUsersInput>
  }

  export type benefictsUpsertWithWhereUniqueWithoutWalletsInput = {
    where: benefictsWhereUniqueInput
    update: XOR<benefictsUpdateWithoutWalletsInput, benefictsUncheckedUpdateWithoutWalletsInput>
    create: XOR<benefictsCreateWithoutWalletsInput, benefictsUncheckedCreateWithoutWalletsInput>
  }

  export type benefictsUpdateWithWhereUniqueWithoutWalletsInput = {
    where: benefictsWhereUniqueInput
    data: XOR<benefictsUpdateWithoutWalletsInput, benefictsUncheckedUpdateWithoutWalletsInput>
  }

  export type benefictsUpdateManyWithWhereWithoutWalletsInput = {
    where: benefictsScalarWhereInput
    data: XOR<benefictsUpdateManyMutationInput, benefictsUncheckedUpdateManyWithoutBenefictsInput>
  }

  export type benefictsScalarWhereInput = {
    AND?: Enumerable<benefictsScalarWhereInput>
    OR?: Enumerable<benefictsScalarWhereInput>
    NOT?: Enumerable<benefictsScalarWhereInput>
    uuid?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    value?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deletedAt?: DateTimeNullableFilter | Date | string | null
    walletUuid?: StringFilter | string
  }

  export type walletsCreateWithoutBenefictsInput = {
    uuid?: string
    textContract: string
    version: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UsersCreateNestedManyWithoutWalletsInput
  }

  export type walletsUncheckedCreateWithoutBenefictsInput = {
    uuid?: string
    textContract: string
    version: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UsersUncheckedCreateNestedManyWithoutWalletsInput
  }

  export type walletsCreateOrConnectWithoutBenefictsInput = {
    where: walletsWhereUniqueInput
    create: XOR<walletsCreateWithoutBenefictsInput, walletsUncheckedCreateWithoutBenefictsInput>
  }

  export type walletsUpsertWithoutBenefictsInput = {
    update: XOR<walletsUpdateWithoutBenefictsInput, walletsUncheckedUpdateWithoutBenefictsInput>
    create: XOR<walletsCreateWithoutBenefictsInput, walletsUncheckedCreateWithoutBenefictsInput>
  }

  export type walletsUpdateWithoutBenefictsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    textContract?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UsersUpdateManyWithoutWalletsNestedInput
  }

  export type walletsUncheckedUpdateWithoutBenefictsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    textContract?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UsersUncheckedUpdateManyWithoutWalletsNestedInput
  }

  export type UsersUpdateWithoutParentsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    childrens?: UsersUpdateManyWithoutParentsNestedInput
    wallets?: walletsUpdateOneWithoutUsersNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateWithoutParentsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    childrens?: UsersUncheckedUpdateManyWithoutParentsNestedInput
    walletUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateManyWithoutChildrensInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    walletUuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUpdateWithoutWalletsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parents?: UsersUpdateOneWithoutChildrensNestedInput
    childrens?: UsersUpdateManyWithoutParentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateWithoutWalletsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentUuid?: NullableStringFieldUpdateOperationsInput | string | null
    childrens?: UsersUncheckedUpdateManyWithoutParentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateManyWithoutUsersInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    preRegisterDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tokePreRegister?: NullableStringFieldUpdateOperationsInput | string | null
    registerDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tokenDiscount?: NullableStringFieldUpdateOperationsInput | string | null
    isActivated?: BoolFieldUpdateOperationsInput | boolean
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentUuid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type benefictsUpdateWithoutWalletsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type benefictsUncheckedUpdateWithoutWalletsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type benefictsUncheckedUpdateManyWithoutBenefictsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}