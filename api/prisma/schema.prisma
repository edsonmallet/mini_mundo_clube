// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model companies {
  uuid          String    @id @default(uuid())
  name          String
  fancyName     String
  corporateName String
  document      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  wallets       wallets[]
  users         users[]
}

model users {
  uuid            String    @id @default(uuid())
  document        String    @unique
  email           String    @unique
  password        String?
  name            String
  preRegisterDate DateTime  @default(now())
  tokePreRegister String?
  registerDate    DateTime?
  tokenDiscount   String?
  isActivated     Boolean   @default(false)
  birthDate       DateTime
  isAdminCompany  Boolean   @default(false)
  parentUuid      String?
  parents         users?    @relation("UsersToUsers", fields: [parentUuid], references: [uuid])
  childrens       users[]   @relation("UsersToUsers")
  walletUuid      String
  wallets         wallets?  @relation(fields: [walletUuid], references: [uuid])
  companyUuid     String
  companies       companies @relation(fields: [companyUuid], references: [uuid])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

model wallets {
  uuid             String             @id @default(uuid())
  textContract     String
  version          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  companyUuid      String
  companies        companies?         @relation(fields: [companyUuid], references: [uuid])
  users            users[]
  walletsBeneficts walletsBeneficts[]
}

model walletsBeneficts {
  uuid          String    @id @default(uuid())
  walletUuid    String
  wallets       wallets?  @relation(fields: [walletUuid], references: [uuid])
  benefictsUuid String
  beneficts     beneficts @relation(fields: [benefictsUuid], references: [uuid])
  realDiscount  Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model beneficts {
  uuid             String             @id @default(uuid())
  name             String
  slug             String             @unique
  description      String
  defaultDiscount  Float
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  walletsBeneficts walletsBeneficts[]
}
